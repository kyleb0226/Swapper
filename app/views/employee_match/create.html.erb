<%= button_to 'Manual Match Employees', manual_employee_match_path, method: :patch %>
<form action="<%= url_for(action: 'create') %>" method="get" class="filter-form">
  <div class="filter-container">
    <div class="filter-group">
      <label for="job_title_filter">Match Type:</label>
      <select id="job_title_filter" name="job_title_filter">
        <option value="" selected>All</option>
        <option value="title">Job Title</option>
        <option value="code">Job Code</option>
      </select>
    </div>

    <div class="filter-group">
      <label for="match_status_filter">Match Status:</label>
      <select id="match_status_filter" name="match_status_filter">
        <option value="" selected>All</option>
        <option value="completed">Completed Match</option>
        <option value="incompleted">Incompleted Match</option>
      </select>
    </div>

    <button type="submit" class="filter-button">Apply Filters</button>
  </div>

</form>

<table class="table table-bordered" id="matches-table">
  <thead class="table-dark">
    <tr> 
      <th><a href="#" class="sort-link" data-sort="employee_name">1st Employee</a></th>
      <th>Employee Location</th>
      <th><a href="#" class="sort-link" data-sort="matched_employee_name">2nd Employee</a></th>
      <th>Employee Location</th>
      <th><a href="#" class="sort-link" data-sort="match_type">Match Type</a></th>
      <th><a href="#" class="sort-link" data-sort="completed">Status</a></th>
      <th>Actions</th> <!-- New column for buttons -->
    </tr>
  </thead>
  <tbody>
    <% @matches.joins(:employee, :matched_employee).where("employees.company_name = ?", Current.user.company_name).each do |match| %>
        <tr>
          <td><%= link_to match.employee.employee_name, employee_path(match.employee) %></td>
          <td><%= match.employee.current_location.name %></td>
          <td><%= link_to match.matched_employee.employee_name, employee_path(match.matched_employee)%></td>
          <td><%= match.matched_employee.current_location.name %></td>
          <td><%= match.match_type %></td>
          <td><%= match.completed %></td>
          <td>
            <% if match.completed? %>
              <%= button_to 'Undo Completion', uncomplete_employee_match_path(match), method: :patch %>
            <% else %>
              <%= button_to 'Complete', complete_employee_match_path(match), method: :patch %>
            <% end %>
          </td>
        </tr>
    <% end %>
  </tbody>
</table>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('matches-table');
    
    // Function to sort the table rows
    function sortTable(columnIndex, ascending) {
      const rows = Array.from(table.querySelectorAll('tbody tr'));
      rows.sort((a, b) => {
        const aValue = a.children[columnIndex].innerText.trim();
        const bValue = b.children[columnIndex].innerText.trim();
        if (isNaN(parseFloat(aValue))) {
          return ascending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        } else {
          return ascending ? parseFloat(aValue) - parseFloat(bValue) : parseFloat(bValue) - parseFloat(aValue);
        }
      });
      table.querySelector('tbody').innerHTML = '';
      rows.forEach(row => table.querySelector('tbody').appendChild(row));
    }

    // Add click event listeners to each sort link
    table.querySelectorAll('.sort-link').forEach(function(link) {
      link.addEventListener('click', function(e) {
        e.preventDefault(); // Prevent default form submission behavior

        // Get the sorting attribute from the data-sort attribute
        const sortAttribute = this.getAttribute('data-sort');

        // Get the current sorting direction from the data-sort-direction attribute
        const currentSortDirection = this.getAttribute('data-sort-direction') || 'asc';

        // Determine the new sorting direction
        const newSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';

        // Update the data-sort-direction attribute
        this.setAttribute('data-sort-direction', newSortDirection);

        // Sort the table
        sortTable(Array.from(this.parentNode.parentNode.children).indexOf(this.parentNode), newSortDirection === 'asc');
        
        // Retrieve the filter values
        const jobTitleFilter = document.getElementById('job_title_filter').value;
        const matchStatusFilter = document.getElementById('match_status_filter').value;

        // Update the URL with the new sorting criteria and current filter parameters
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.set('sort_by', sortAttribute);
        urlParams.set('sort_direction', newSortDirection);
        urlParams.set('job_title_filter', jobTitleFilter);
        urlParams.set('match_status_filter', matchStatusFilter);
        const newUrl = `${window.location.pathname}?${urlParams.toString()}`;

        // Update the browser history without reloading the page
        window.history.replaceState({}, '', newUrl);
      });
    });
  });
</script>